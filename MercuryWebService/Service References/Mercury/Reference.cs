//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MercuryWebService.Mercury {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MercuryOrderShipping", Namespace="http://schemas.datacontract.org/2004/07/MercuryWebservice")]
    [System.SerializableAttribute()]
    public partial class MercuryOrderShipping : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int mercuryOrderIDField;
        
        private System.Nullable<System.DateTime> shipByDateField;
        
        private bool shippingTrackingCreatedStatusField;
        
        private string shippingTrackingCreatedStatusDescField;
        
        private string shippingTrackingIDField;
        
        private string shippingTrackingLocationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int mercuryOrderID {
            get {
                return this.mercuryOrderIDField;
            }
            set {
                if ((this.mercuryOrderIDField.Equals(value) != true)) {
                    this.mercuryOrderIDField = value;
                    this.RaisePropertyChanged("mercuryOrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<System.DateTime> shipByDate {
            get {
                return this.shipByDateField;
            }
            set {
                if ((this.shipByDateField.Equals(value) != true)) {
                    this.shipByDateField = value;
                    this.RaisePropertyChanged("shipByDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool shippingTrackingCreatedStatus {
            get {
                return this.shippingTrackingCreatedStatusField;
            }
            set {
                if ((this.shippingTrackingCreatedStatusField.Equals(value) != true)) {
                    this.shippingTrackingCreatedStatusField = value;
                    this.RaisePropertyChanged("shippingTrackingCreatedStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string shippingTrackingCreatedStatusDesc {
            get {
                return this.shippingTrackingCreatedStatusDescField;
            }
            set {
                if ((object.ReferenceEquals(this.shippingTrackingCreatedStatusDescField, value) != true)) {
                    this.shippingTrackingCreatedStatusDescField = value;
                    this.RaisePropertyChanged("shippingTrackingCreatedStatusDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string shippingTrackingID {
            get {
                return this.shippingTrackingIDField;
            }
            set {
                if ((object.ReferenceEquals(this.shippingTrackingIDField, value) != true)) {
                    this.shippingTrackingIDField = value;
                    this.RaisePropertyChanged("shippingTrackingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string shippingTrackingLocation {
            get {
                return this.shippingTrackingLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.shippingTrackingLocationField, value) != true)) {
                    this.shippingTrackingLocationField = value;
                    this.RaisePropertyChanged("shippingTrackingLocation");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MercuryOrderRequest", Namespace="http://schemas.datacontract.org/2004/07/MercuryWebservice")]
    [System.SerializableAttribute()]
    public partial class MercuryOrderRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int highSeatField;
        
        private string invoiceIDField;
        
        private int lowSeatField;
        
        private int mercuryOrderIDField;
        
        private string messageField;
        
        private string rowField;
        
        private string sectionField;
        
        private string sellerEmailField;
        
        private string sellerNameField;
        
        private string sellerPhoneField;
        
        private System.Nullable<System.DateTime> shipByDateField;
        
        private bool shippingTrackingCreatedStatusField;
        
        private string shippingTrackingCreatedStatusDescField;
        
        private string shippingTrackingIDField;
        
        private string shippingTrackingLocationField;
        
        private bool successField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int highSeat {
            get {
                return this.highSeatField;
            }
            set {
                if ((this.highSeatField.Equals(value) != true)) {
                    this.highSeatField = value;
                    this.RaisePropertyChanged("highSeat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string invoiceID {
            get {
                return this.invoiceIDField;
            }
            set {
                if ((object.ReferenceEquals(this.invoiceIDField, value) != true)) {
                    this.invoiceIDField = value;
                    this.RaisePropertyChanged("invoiceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int lowSeat {
            get {
                return this.lowSeatField;
            }
            set {
                if ((this.lowSeatField.Equals(value) != true)) {
                    this.lowSeatField = value;
                    this.RaisePropertyChanged("lowSeat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int mercuryOrderID {
            get {
                return this.mercuryOrderIDField;
            }
            set {
                if ((this.mercuryOrderIDField.Equals(value) != true)) {
                    this.mercuryOrderIDField = value;
                    this.RaisePropertyChanged("mercuryOrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((object.ReferenceEquals(this.messageField, value) != true)) {
                    this.messageField = value;
                    this.RaisePropertyChanged("message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string row {
            get {
                return this.rowField;
            }
            set {
                if ((object.ReferenceEquals(this.rowField, value) != true)) {
                    this.rowField = value;
                    this.RaisePropertyChanged("row");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string section {
            get {
                return this.sectionField;
            }
            set {
                if ((object.ReferenceEquals(this.sectionField, value) != true)) {
                    this.sectionField = value;
                    this.RaisePropertyChanged("section");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string sellerEmail {
            get {
                return this.sellerEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.sellerEmailField, value) != true)) {
                    this.sellerEmailField = value;
                    this.RaisePropertyChanged("sellerEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string sellerName {
            get {
                return this.sellerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.sellerNameField, value) != true)) {
                    this.sellerNameField = value;
                    this.RaisePropertyChanged("sellerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string sellerPhone {
            get {
                return this.sellerPhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.sellerPhoneField, value) != true)) {
                    this.sellerPhoneField = value;
                    this.RaisePropertyChanged("sellerPhone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<System.DateTime> shipByDate {
            get {
                return this.shipByDateField;
            }
            set {
                if ((this.shipByDateField.Equals(value) != true)) {
                    this.shipByDateField = value;
                    this.RaisePropertyChanged("shipByDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool shippingTrackingCreatedStatus {
            get {
                return this.shippingTrackingCreatedStatusField;
            }
            set {
                if ((this.shippingTrackingCreatedStatusField.Equals(value) != true)) {
                    this.shippingTrackingCreatedStatusField = value;
                    this.RaisePropertyChanged("shippingTrackingCreatedStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string shippingTrackingCreatedStatusDesc {
            get {
                return this.shippingTrackingCreatedStatusDescField;
            }
            set {
                if ((object.ReferenceEquals(this.shippingTrackingCreatedStatusDescField, value) != true)) {
                    this.shippingTrackingCreatedStatusDescField = value;
                    this.RaisePropertyChanged("shippingTrackingCreatedStatusDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string shippingTrackingID {
            get {
                return this.shippingTrackingIDField;
            }
            set {
                if ((object.ReferenceEquals(this.shippingTrackingIDField, value) != true)) {
                    this.shippingTrackingIDField = value;
                    this.RaisePropertyChanged("shippingTrackingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string shippingTrackingLocation {
            get {
                return this.shippingTrackingLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.shippingTrackingLocationField, value) != true)) {
                    this.shippingTrackingLocationField = value;
                    this.RaisePropertyChanged("shippingTrackingLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool success {
            get {
                return this.successField;
            }
            set {
                if ((this.successField.Equals(value) != true)) {
                    this.successField = value;
                    this.RaisePropertyChanged("success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FedExShippingMethod", Namespace="http://schemas.datacontract.org/2004/07/MercuryWebservice")]
    [System.SerializableAttribute()]
    public partial class FedExShippingMethod : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int MethodIdField;
        
        private string MethodNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int MethodId {
            get {
                return this.MethodIdField;
            }
            set {
                if ((this.MethodIdField.Equals(value) != true)) {
                    this.MethodIdField = value;
                    this.RaisePropertyChanged("MethodId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string MethodName {
            get {
                return this.MethodNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MethodNameField, value) != true)) {
                    this.MethodNameField = value;
                    this.RaisePropertyChanged("MethodName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TicketGroup", Namespace="http://schemas.datacontract.org/2004/07/MercuryWebservice")]
    [System.SerializableAttribute()]
    public partial class TicketGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int EventIDField;
        
        private decimal FacePriceField;
        
        private string HighSeatField;
        
        private int IDField;
        
        private bool IsMineField;
        
        private string LowSeatField;
        
        private string NotesField;
        
        private System.Nullable<System.DateTime> OnHandExpectedArrivalDateField;
        
        private decimal RetailPriceField;
        
        private string RowField;
        
        private string SectionField;
        
        private string[] ShippingMethodsAvailableField;
        
        private string TicketGroupTypeField;
        
        private int TicketQuantityField;
        
        private int[] ValidSplitsField;
        
        private decimal WholesalePriceField;
        
        private bool isMercuryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int EventID {
            get {
                return this.EventIDField;
            }
            set {
                if ((this.EventIDField.Equals(value) != true)) {
                    this.EventIDField = value;
                    this.RaisePropertyChanged("EventID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal FacePrice {
            get {
                return this.FacePriceField;
            }
            set {
                if ((this.FacePriceField.Equals(value) != true)) {
                    this.FacePriceField = value;
                    this.RaisePropertyChanged("FacePrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string HighSeat {
            get {
                return this.HighSeatField;
            }
            set {
                if ((object.ReferenceEquals(this.HighSeatField, value) != true)) {
                    this.HighSeatField = value;
                    this.RaisePropertyChanged("HighSeat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool IsMine {
            get {
                return this.IsMineField;
            }
            set {
                if ((this.IsMineField.Equals(value) != true)) {
                    this.IsMineField = value;
                    this.RaisePropertyChanged("IsMine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string LowSeat {
            get {
                return this.LowSeatField;
            }
            set {
                if ((object.ReferenceEquals(this.LowSeatField, value) != true)) {
                    this.LowSeatField = value;
                    this.RaisePropertyChanged("LowSeat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<System.DateTime> OnHandExpectedArrivalDate {
            get {
                return this.OnHandExpectedArrivalDateField;
            }
            set {
                if ((this.OnHandExpectedArrivalDateField.Equals(value) != true)) {
                    this.OnHandExpectedArrivalDateField = value;
                    this.RaisePropertyChanged("OnHandExpectedArrivalDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal RetailPrice {
            get {
                return this.RetailPriceField;
            }
            set {
                if ((this.RetailPriceField.Equals(value) != true)) {
                    this.RetailPriceField = value;
                    this.RaisePropertyChanged("RetailPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Row {
            get {
                return this.RowField;
            }
            set {
                if ((object.ReferenceEquals(this.RowField, value) != true)) {
                    this.RowField = value;
                    this.RaisePropertyChanged("Row");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Section {
            get {
                return this.SectionField;
            }
            set {
                if ((object.ReferenceEquals(this.SectionField, value) != true)) {
                    this.SectionField = value;
                    this.RaisePropertyChanged("Section");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] ShippingMethodsAvailable {
            get {
                return this.ShippingMethodsAvailableField;
            }
            set {
                if ((object.ReferenceEquals(this.ShippingMethodsAvailableField, value) != true)) {
                    this.ShippingMethodsAvailableField = value;
                    this.RaisePropertyChanged("ShippingMethodsAvailable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TicketGroupType {
            get {
                return this.TicketGroupTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketGroupTypeField, value) != true)) {
                    this.TicketGroupTypeField = value;
                    this.RaisePropertyChanged("TicketGroupType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int TicketQuantity {
            get {
                return this.TicketQuantityField;
            }
            set {
                if ((this.TicketQuantityField.Equals(value) != true)) {
                    this.TicketQuantityField = value;
                    this.RaisePropertyChanged("TicketQuantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int[] ValidSplits {
            get {
                return this.ValidSplitsField;
            }
            set {
                if ((object.ReferenceEquals(this.ValidSplitsField, value) != true)) {
                    this.ValidSplitsField = value;
                    this.RaisePropertyChanged("ValidSplits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal WholesalePrice {
            get {
                return this.WholesalePriceField;
            }
            set {
                if ((this.WholesalePriceField.Equals(value) != true)) {
                    this.WholesalePriceField = value;
                    this.RaisePropertyChanged("WholesalePrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool isMercury {
            get {
                return this.isMercuryField;
            }
            set {
                if ((this.isMercuryField.Equals(value) != true)) {
                    this.isMercuryField = value;
                    this.RaisePropertyChanged("isMercury");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TicketGroup2", Namespace="http://schemas.datacontract.org/2004/07/MercuryWebservice")]
    [System.SerializableAttribute()]
    public partial class TicketGroup2 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int EventIDField;
        
        private decimal FacePriceField;
        
        private string HighSeatField;
        
        private int IDField;
        
        private bool IsMineField;
        
        private bool IsSalesTaxApplicableField;
        
        private string LowSeatField;
        
        private string NotesField;
        
        private System.Nullable<System.DateTime> OnHandExpectedArrivalDateField;
        
        private decimal RetailPriceField;
        
        private string RowField;
        
        private string SectionField;
        
        private string[] ShippingMethodsAvailableField;
        
        private string TicketGroupTypeField;
        
        private int TicketQuantityField;
        
        private int[] ValidSplitsField;
        
        private decimal WholesalePriceField;
        
        private bool isMercuryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int EventID {
            get {
                return this.EventIDField;
            }
            set {
                if ((this.EventIDField.Equals(value) != true)) {
                    this.EventIDField = value;
                    this.RaisePropertyChanged("EventID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal FacePrice {
            get {
                return this.FacePriceField;
            }
            set {
                if ((this.FacePriceField.Equals(value) != true)) {
                    this.FacePriceField = value;
                    this.RaisePropertyChanged("FacePrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string HighSeat {
            get {
                return this.HighSeatField;
            }
            set {
                if ((object.ReferenceEquals(this.HighSeatField, value) != true)) {
                    this.HighSeatField = value;
                    this.RaisePropertyChanged("HighSeat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool IsMine {
            get {
                return this.IsMineField;
            }
            set {
                if ((this.IsMineField.Equals(value) != true)) {
                    this.IsMineField = value;
                    this.RaisePropertyChanged("IsMine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool IsSalesTaxApplicable {
            get {
                return this.IsSalesTaxApplicableField;
            }
            set {
                if ((this.IsSalesTaxApplicableField.Equals(value) != true)) {
                    this.IsSalesTaxApplicableField = value;
                    this.RaisePropertyChanged("IsSalesTaxApplicable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string LowSeat {
            get {
                return this.LowSeatField;
            }
            set {
                if ((object.ReferenceEquals(this.LowSeatField, value) != true)) {
                    this.LowSeatField = value;
                    this.RaisePropertyChanged("LowSeat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<System.DateTime> OnHandExpectedArrivalDate {
            get {
                return this.OnHandExpectedArrivalDateField;
            }
            set {
                if ((this.OnHandExpectedArrivalDateField.Equals(value) != true)) {
                    this.OnHandExpectedArrivalDateField = value;
                    this.RaisePropertyChanged("OnHandExpectedArrivalDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal RetailPrice {
            get {
                return this.RetailPriceField;
            }
            set {
                if ((this.RetailPriceField.Equals(value) != true)) {
                    this.RetailPriceField = value;
                    this.RaisePropertyChanged("RetailPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Row {
            get {
                return this.RowField;
            }
            set {
                if ((object.ReferenceEquals(this.RowField, value) != true)) {
                    this.RowField = value;
                    this.RaisePropertyChanged("Row");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Section {
            get {
                return this.SectionField;
            }
            set {
                if ((object.ReferenceEquals(this.SectionField, value) != true)) {
                    this.SectionField = value;
                    this.RaisePropertyChanged("Section");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] ShippingMethodsAvailable {
            get {
                return this.ShippingMethodsAvailableField;
            }
            set {
                if ((object.ReferenceEquals(this.ShippingMethodsAvailableField, value) != true)) {
                    this.ShippingMethodsAvailableField = value;
                    this.RaisePropertyChanged("ShippingMethodsAvailable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TicketGroupType {
            get {
                return this.TicketGroupTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketGroupTypeField, value) != true)) {
                    this.TicketGroupTypeField = value;
                    this.RaisePropertyChanged("TicketGroupType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int TicketQuantity {
            get {
                return this.TicketQuantityField;
            }
            set {
                if ((this.TicketQuantityField.Equals(value) != true)) {
                    this.TicketQuantityField = value;
                    this.RaisePropertyChanged("TicketQuantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int[] ValidSplits {
            get {
                return this.ValidSplitsField;
            }
            set {
                if ((object.ReferenceEquals(this.ValidSplitsField, value) != true)) {
                    this.ValidSplitsField = value;
                    this.RaisePropertyChanged("ValidSplits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal WholesalePrice {
            get {
                return this.WholesalePriceField;
            }
            set {
                if ((this.WholesalePriceField.Equals(value) != true)) {
                    this.WholesalePriceField = value;
                    this.RaisePropertyChanged("WholesalePrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool isMercury {
            get {
                return this.isMercuryField;
            }
            set {
                if ((this.isMercuryField.Equals(value) != true)) {
                    this.isMercuryField = value;
                    this.RaisePropertyChanged("isMercury");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TempLockResponse", Namespace="http://schemas.datacontract.org/2004/07/MercuryWebservice")]
    [System.SerializableAttribute()]
    public partial class TempLockResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Nullable<int> currentQuantityField;
        
        private System.Nullable<decimal> currentWholesalePriceField;
        
        private decimal mercuryTempLockCompletionRateField;
        
        private System.Nullable<int> mercuryTempLockExpirationSecondsField;
        
        private bool mercuryTempLockStatusField;
        
        private string mercuryTempLockStatusDescField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<int> currentQuantity {
            get {
                return this.currentQuantityField;
            }
            set {
                if ((this.currentQuantityField.Equals(value) != true)) {
                    this.currentQuantityField = value;
                    this.RaisePropertyChanged("currentQuantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<decimal> currentWholesalePrice {
            get {
                return this.currentWholesalePriceField;
            }
            set {
                if ((this.currentWholesalePriceField.Equals(value) != true)) {
                    this.currentWholesalePriceField = value;
                    this.RaisePropertyChanged("currentWholesalePrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal mercuryTempLockCompletionRate {
            get {
                return this.mercuryTempLockCompletionRateField;
            }
            set {
                if ((this.mercuryTempLockCompletionRateField.Equals(value) != true)) {
                    this.mercuryTempLockCompletionRateField = value;
                    this.RaisePropertyChanged("mercuryTempLockCompletionRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<int> mercuryTempLockExpirationSeconds {
            get {
                return this.mercuryTempLockExpirationSecondsField;
            }
            set {
                if ((this.mercuryTempLockExpirationSecondsField.Equals(value) != true)) {
                    this.mercuryTempLockExpirationSecondsField = value;
                    this.RaisePropertyChanged("mercuryTempLockExpirationSeconds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool mercuryTempLockStatus {
            get {
                return this.mercuryTempLockStatusField;
            }
            set {
                if ((this.mercuryTempLockStatusField.Equals(value) != true)) {
                    this.mercuryTempLockStatusField = value;
                    this.RaisePropertyChanged("mercuryTempLockStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string mercuryTempLockStatusDesc {
            get {
                return this.mercuryTempLockStatusDescField;
            }
            set {
                if ((object.ReferenceEquals(this.mercuryTempLockStatusDescField, value) != true)) {
                    this.mercuryTempLockStatusDescField = value;
                    this.RaisePropertyChanged("mercuryTempLockStatusDesc");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://webservices.ticketnetwork.com", ConfigurationName="Mercury.IMercuryService", SessionMode=System.ServiceModel.SessionMode.NotAllowed)]
    public interface IMercuryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/UpdateMercuryOrderShipping", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/UpdateMercuryOrderShippingRe" +
            "sponse")]
        MercuryWebService.Mercury.MercuryOrderShipping UpdateMercuryOrderShipping(
                    int webConfigID, 
                    int mercuryOrderID, 
                    int externalPONumber, 
                    int ticketGroupID, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    decimal shippingPrice, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail, 
                    string retailCustomerZipcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/UpdateMercuryOrderShipping", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/UpdateMercuryOrderShippingRe" +
            "sponse")]
        System.Threading.Tasks.Task<MercuryWebService.Mercury.MercuryOrderShipping> UpdateMercuryOrderShippingAsync(
                    int webConfigID, 
                    int mercuryOrderID, 
                    int externalPONumber, 
                    int ticketGroupID, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    decimal shippingPrice, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail, 
                    string retailCustomerZipcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetMercuryOrderShipping", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetMercuryOrderShippingRespo" +
            "nse")]
        MercuryWebService.Mercury.MercuryOrderShipping GetMercuryOrderShipping(int webConfigID, int mercuryOrderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetMercuryOrderShipping", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetMercuryOrderShippingRespo" +
            "nse")]
        System.Threading.Tasks.Task<MercuryWebService.Mercury.MercuryOrderShipping> GetMercuryOrderShippingAsync(int webConfigID, int mercuryOrderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetOrderRequestDecision", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetOrderRequestDecisionRespo" +
            "nse")]
        MercuryWebService.Mercury.MercuryOrderRequest GetOrderRequestDecision(int webConfigID, int ticketGroupID, System.Guid stage1Guid, System.Guid stage2Guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetOrderRequestDecision", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetOrderRequestDecisionRespo" +
            "nse")]
        System.Threading.Tasks.Task<MercuryWebService.Mercury.MercuryOrderRequest> GetOrderRequestDecisionAsync(int webConfigID, int ticketGroupID, System.Guid stage1Guid, System.Guid stage2Guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetOrderDetails", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetOrderDetailsResponse")]
        MercuryWebService.Mercury.MercuryOrderRequest GetOrderDetails(int webConfigID, int mercuryOrderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetOrderDetails", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetOrderDetailsResponse")]
        System.Threading.Tasks.Task<MercuryWebService.Mercury.MercuryOrderRequest> GetOrderDetailsAsync(int webConfigID, int mercuryOrderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetFedExShippingMethods", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetFedExShippingMethodsRespo" +
            "nse")]
        MercuryWebService.Mercury.FedExShippingMethod[] GetFedExShippingMethods(int websiteConfigID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetFedExShippingMethods", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetFedExShippingMethodsRespo" +
            "nse")]
        System.Threading.Tasks.Task<MercuryWebService.Mercury.FedExShippingMethod[]> GetFedExShippingMethodsAsync(int websiteConfigID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetTickets", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetTicketsResponse")]
        MercuryWebService.Mercury.TicketGroup[] GetTickets(int websiteConfigID, System.Nullable<int> numberOfRecords, System.Nullable<int> eventID, System.Nullable<decimal> lowPrice, System.Nullable<decimal> highPrice, System.Nullable<int> ticketGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetTickets", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetTicketsResponse")]
        System.Threading.Tasks.Task<MercuryWebService.Mercury.TicketGroup[]> GetTicketsAsync(int websiteConfigID, System.Nullable<int> numberOfRecords, System.Nullable<int> eventID, System.Nullable<decimal> lowPrice, System.Nullable<decimal> highPrice, System.Nullable<int> ticketGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/CreateMercuryOrder", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/CreateMercuryOrderResponse")]
        MercuryWebService.Mercury.MercuryOrderRequest CreateMercuryOrder(
                    int webConfigID, 
                    int externalPONumber, 
                    int ticketGroupID, 
                    int quantity, 
                    decimal wholesalePrice, 
                    bool overridePrice, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    decimal shippingPrice, 
                    string shippingInstructions, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail, 
                    string retailCustomerZipcode, 
                    string generalPurchaseNotes, 
                    System.Guid stage1Guid, 
                    System.Guid stage2Guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/CreateMercuryOrder", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/CreateMercuryOrderResponse")]
        System.Threading.Tasks.Task<MercuryWebService.Mercury.MercuryOrderRequest> CreateMercuryOrderAsync(
                    int webConfigID, 
                    int externalPONumber, 
                    int ticketGroupID, 
                    int quantity, 
                    decimal wholesalePrice, 
                    bool overridePrice, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    decimal shippingPrice, 
                    string shippingInstructions, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail, 
                    string retailCustomerZipcode, 
                    string generalPurchaseNotes, 
                    System.Guid stage1Guid, 
                    System.Guid stage2Guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetTickets2", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetTickets2Response")]
        MercuryWebService.Mercury.TicketGroup2[] GetTickets2(int websiteConfigID, System.Nullable<int> numberOfRecords, System.Nullable<int> eventID, System.Nullable<decimal> lowPrice, System.Nullable<decimal> highPrice, System.Nullable<int> ticketGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetTickets2", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetTickets2Response")]
        System.Threading.Tasks.Task<MercuryWebService.Mercury.TicketGroup2[]> GetTickets2Async(int websiteConfigID, System.Nullable<int> numberOfRecords, System.Nullable<int> eventID, System.Nullable<decimal> lowPrice, System.Nullable<decimal> highPrice, System.Nullable<int> ticketGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetMercuryTempLock", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetMercuryTempLockResponse")]
        MercuryWebService.Mercury.TempLockResponse GetMercuryTempLock(int webConfigID, System.Guid LockRequestID, int ticketGroupID, int quantity, decimal wholesalePrice, bool overridePrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetMercuryTempLock", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetMercuryTempLockResponse")]
        System.Threading.Tasks.Task<MercuryWebService.Mercury.TempLockResponse> GetMercuryTempLockAsync(int webConfigID, System.Guid LockRequestID, int ticketGroupID, int quantity, decimal wholesalePrice, bool overridePrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/CreateMercuryOrder2", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/CreateMercuryOrder2Response")]
        MercuryWebService.Mercury.MercuryOrderRequest CreateMercuryOrder2(
                    int webConfigID, 
                    int externalPONumber, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    decimal shippingPrice, 
                    string shippingInstructions, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail, 
                    string retailCustomerZipcode, 
                    string generalPurchaseNotes, 
                    System.Guid stage1Guid, 
                    System.Guid stage2Guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/CreateMercuryOrder2", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/CreateMercuryOrder2Response")]
        System.Threading.Tasks.Task<MercuryWebService.Mercury.MercuryOrderRequest> CreateMercuryOrder2Async(
                    int webConfigID, 
                    int externalPONumber, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    decimal shippingPrice, 
                    string shippingInstructions, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail, 
                    string retailCustomerZipcode, 
                    string generalPurchaseNotes, 
                    System.Guid stage1Guid, 
                    System.Guid stage2Guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetLockDecision", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetLockDecisionResponse")]
        MercuryWebService.Mercury.TempLockResponse GetLockDecision(int webConfigID, System.Guid LockRequestID, int ticketGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetLockDecision", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetLockDecisionResponse")]
        System.Threading.Tasks.Task<MercuryWebService.Mercury.TempLockResponse> GetLockDecisionAsync(int webConfigID, System.Guid LockRequestID, int ticketGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/CreateMercuryOrder3", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/CreateMercuryOrder3Response")]
        MercuryWebService.Mercury.MercuryOrderRequest CreateMercuryOrder3(
                    int webConfigID, 
                    int externalPONumber, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    string labelUrl, 
                    string trackingNumber, 
                    decimal shippingPrice, 
                    string shippingInstructions, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerZipcode, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail, 
                    string generalPurchaseNotes, 
                    System.Guid stage1Guid, 
                    System.Guid stage2Guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/CreateMercuryOrder3", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/CreateMercuryOrder3Response")]
        System.Threading.Tasks.Task<MercuryWebService.Mercury.MercuryOrderRequest> CreateMercuryOrder3Async(
                    int webConfigID, 
                    int externalPONumber, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    string labelUrl, 
                    string trackingNumber, 
                    decimal shippingPrice, 
                    string shippingInstructions, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerZipcode, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail, 
                    string generalPurchaseNotes, 
                    System.Guid stage1Guid, 
                    System.Guid stage2Guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/UpdateMercuryOrderShipping2", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/UpdateMercuryOrderShipping2R" +
            "esponse")]
        MercuryWebService.Mercury.MercuryOrderShipping UpdateMercuryOrderShipping2(
                    int webConfigID, 
                    int mercuryOrderID, 
                    int externalPONumber, 
                    int ticketGroupID, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    string labelUrl, 
                    string trackingNumber, 
                    decimal shippingPrice, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerZipcode, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/UpdateMercuryOrderShipping2", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/UpdateMercuryOrderShipping2R" +
            "esponse")]
        System.Threading.Tasks.Task<MercuryWebService.Mercury.MercuryOrderShipping> UpdateMercuryOrderShipping2Async(
                    int webConfigID, 
                    int mercuryOrderID, 
                    int externalPONumber, 
                    int ticketGroupID, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    string labelUrl, 
                    string trackingNumber, 
                    decimal shippingPrice, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerZipcode, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetMercuryInstantDownload", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetMercuryInstantDownloadRes" +
            "ponse")]
        System.IO.Stream GetMercuryInstantDownload(int webConfigID, int mercuryOrderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.ticketnetwork.com/IMercuryService/GetMercuryInstantDownload", ReplyAction="http://webservices.ticketnetwork.com/IMercuryService/GetMercuryInstantDownloadRes" +
            "ponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetMercuryInstantDownloadAsync(int webConfigID, int mercuryOrderID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMercuryServiceChannel : MercuryWebService.Mercury.IMercuryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MercuryServiceClient : System.ServiceModel.ClientBase<MercuryWebService.Mercury.IMercuryService>, MercuryWebService.Mercury.IMercuryService {
        
        public MercuryServiceClient() {
        }
        
        public MercuryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MercuryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MercuryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MercuryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MercuryWebService.Mercury.MercuryOrderShipping UpdateMercuryOrderShipping(
                    int webConfigID, 
                    int mercuryOrderID, 
                    int externalPONumber, 
                    int ticketGroupID, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    decimal shippingPrice, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail, 
                    string retailCustomerZipcode) {
            return base.Channel.UpdateMercuryOrderShipping(webConfigID, mercuryOrderID, externalPONumber, ticketGroupID, shippingMethodID, shippingMethodDesc, shippingPrice, retailCustomerName, retailCustomerPhone, retailCustomerStreet1, retailCustomerStreet2, retailCustomerCity, retailCustomerStateProvince, retailCustomerStateProvinceID, retailCustomerCountry, retailCustomerCountryID, retailCustomerEmail, retailCustomerZipcode);
        }
        
        public System.Threading.Tasks.Task<MercuryWebService.Mercury.MercuryOrderShipping> UpdateMercuryOrderShippingAsync(
                    int webConfigID, 
                    int mercuryOrderID, 
                    int externalPONumber, 
                    int ticketGroupID, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    decimal shippingPrice, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail, 
                    string retailCustomerZipcode) {
            return base.Channel.UpdateMercuryOrderShippingAsync(webConfigID, mercuryOrderID, externalPONumber, ticketGroupID, shippingMethodID, shippingMethodDesc, shippingPrice, retailCustomerName, retailCustomerPhone, retailCustomerStreet1, retailCustomerStreet2, retailCustomerCity, retailCustomerStateProvince, retailCustomerStateProvinceID, retailCustomerCountry, retailCustomerCountryID, retailCustomerEmail, retailCustomerZipcode);
        }
        
        public MercuryWebService.Mercury.MercuryOrderShipping GetMercuryOrderShipping(int webConfigID, int mercuryOrderID) {
            return base.Channel.GetMercuryOrderShipping(webConfigID, mercuryOrderID);
        }
        
        public System.Threading.Tasks.Task<MercuryWebService.Mercury.MercuryOrderShipping> GetMercuryOrderShippingAsync(int webConfigID, int mercuryOrderID) {
            return base.Channel.GetMercuryOrderShippingAsync(webConfigID, mercuryOrderID);
        }
        
        public MercuryWebService.Mercury.MercuryOrderRequest GetOrderRequestDecision(int webConfigID, int ticketGroupID, System.Guid stage1Guid, System.Guid stage2Guid) {
            return base.Channel.GetOrderRequestDecision(webConfigID, ticketGroupID, stage1Guid, stage2Guid);
        }
        
        public System.Threading.Tasks.Task<MercuryWebService.Mercury.MercuryOrderRequest> GetOrderRequestDecisionAsync(int webConfigID, int ticketGroupID, System.Guid stage1Guid, System.Guid stage2Guid) {
            return base.Channel.GetOrderRequestDecisionAsync(webConfigID, ticketGroupID, stage1Guid, stage2Guid);
        }
        
        public MercuryWebService.Mercury.MercuryOrderRequest GetOrderDetails(int webConfigID, int mercuryOrderID) {
            return base.Channel.GetOrderDetails(webConfigID, mercuryOrderID);
        }
        
        public System.Threading.Tasks.Task<MercuryWebService.Mercury.MercuryOrderRequest> GetOrderDetailsAsync(int webConfigID, int mercuryOrderID) {
            return base.Channel.GetOrderDetailsAsync(webConfigID, mercuryOrderID);
        }
        
        public MercuryWebService.Mercury.FedExShippingMethod[] GetFedExShippingMethods(int websiteConfigID) {
            return base.Channel.GetFedExShippingMethods(websiteConfigID);
        }
        
        public System.Threading.Tasks.Task<MercuryWebService.Mercury.FedExShippingMethod[]> GetFedExShippingMethodsAsync(int websiteConfigID) {
            return base.Channel.GetFedExShippingMethodsAsync(websiteConfigID);
        }
        
        public MercuryWebService.Mercury.TicketGroup[] GetTickets(int websiteConfigID, System.Nullable<int> numberOfRecords, System.Nullable<int> eventID, System.Nullable<decimal> lowPrice, System.Nullable<decimal> highPrice, System.Nullable<int> ticketGroupID) {
            return base.Channel.GetTickets(websiteConfigID, numberOfRecords, eventID, lowPrice, highPrice, ticketGroupID);
        }
        
        public System.Threading.Tasks.Task<MercuryWebService.Mercury.TicketGroup[]> GetTicketsAsync(int websiteConfigID, System.Nullable<int> numberOfRecords, System.Nullable<int> eventID, System.Nullable<decimal> lowPrice, System.Nullable<decimal> highPrice, System.Nullable<int> ticketGroupID) {
            return base.Channel.GetTicketsAsync(websiteConfigID, numberOfRecords, eventID, lowPrice, highPrice, ticketGroupID);
        }
        
        public MercuryWebService.Mercury.MercuryOrderRequest CreateMercuryOrder(
                    int webConfigID, 
                    int externalPONumber, 
                    int ticketGroupID, 
                    int quantity, 
                    decimal wholesalePrice, 
                    bool overridePrice, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    decimal shippingPrice, 
                    string shippingInstructions, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail, 
                    string retailCustomerZipcode, 
                    string generalPurchaseNotes, 
                    System.Guid stage1Guid, 
                    System.Guid stage2Guid) {
            return base.Channel.CreateMercuryOrder(webConfigID, externalPONumber, ticketGroupID, quantity, wholesalePrice, overridePrice, shippingMethodID, shippingMethodDesc, shippingPrice, shippingInstructions, retailCustomerName, retailCustomerPhone, retailCustomerStreet1, retailCustomerStreet2, retailCustomerCity, retailCustomerStateProvince, retailCustomerStateProvinceID, retailCustomerCountry, retailCustomerCountryID, retailCustomerEmail, retailCustomerZipcode, generalPurchaseNotes, stage1Guid, stage2Guid);
        }
        
        public System.Threading.Tasks.Task<MercuryWebService.Mercury.MercuryOrderRequest> CreateMercuryOrderAsync(
                    int webConfigID, 
                    int externalPONumber, 
                    int ticketGroupID, 
                    int quantity, 
                    decimal wholesalePrice, 
                    bool overridePrice, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    decimal shippingPrice, 
                    string shippingInstructions, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail, 
                    string retailCustomerZipcode, 
                    string generalPurchaseNotes, 
                    System.Guid stage1Guid, 
                    System.Guid stage2Guid) {
            return base.Channel.CreateMercuryOrderAsync(webConfigID, externalPONumber, ticketGroupID, quantity, wholesalePrice, overridePrice, shippingMethodID, shippingMethodDesc, shippingPrice, shippingInstructions, retailCustomerName, retailCustomerPhone, retailCustomerStreet1, retailCustomerStreet2, retailCustomerCity, retailCustomerStateProvince, retailCustomerStateProvinceID, retailCustomerCountry, retailCustomerCountryID, retailCustomerEmail, retailCustomerZipcode, generalPurchaseNotes, stage1Guid, stage2Guid);
        }
        
        public MercuryWebService.Mercury.TicketGroup2[] GetTickets2(int websiteConfigID, System.Nullable<int> numberOfRecords, System.Nullable<int> eventID, System.Nullable<decimal> lowPrice, System.Nullable<decimal> highPrice, System.Nullable<int> ticketGroupID) {
            return base.Channel.GetTickets2(websiteConfigID, numberOfRecords, eventID, lowPrice, highPrice, ticketGroupID);
        }
        
        public System.Threading.Tasks.Task<MercuryWebService.Mercury.TicketGroup2[]> GetTickets2Async(int websiteConfigID, System.Nullable<int> numberOfRecords, System.Nullable<int> eventID, System.Nullable<decimal> lowPrice, System.Nullable<decimal> highPrice, System.Nullable<int> ticketGroupID) {
            return base.Channel.GetTickets2Async(websiteConfigID, numberOfRecords, eventID, lowPrice, highPrice, ticketGroupID);
        }
        
        public MercuryWebService.Mercury.TempLockResponse GetMercuryTempLock(int webConfigID, System.Guid LockRequestID, int ticketGroupID, int quantity, decimal wholesalePrice, bool overridePrice) {
            return base.Channel.GetMercuryTempLock(webConfigID, LockRequestID, ticketGroupID, quantity, wholesalePrice, overridePrice);
        }
        
        public System.Threading.Tasks.Task<MercuryWebService.Mercury.TempLockResponse> GetMercuryTempLockAsync(int webConfigID, System.Guid LockRequestID, int ticketGroupID, int quantity, decimal wholesalePrice, bool overridePrice) {
            return base.Channel.GetMercuryTempLockAsync(webConfigID, LockRequestID, ticketGroupID, quantity, wholesalePrice, overridePrice);
        }
        
        public MercuryWebService.Mercury.MercuryOrderRequest CreateMercuryOrder2(
                    int webConfigID, 
                    int externalPONumber, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    decimal shippingPrice, 
                    string shippingInstructions, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail, 
                    string retailCustomerZipcode, 
                    string generalPurchaseNotes, 
                    System.Guid stage1Guid, 
                    System.Guid stage2Guid) {
            return base.Channel.CreateMercuryOrder2(webConfigID, externalPONumber, shippingMethodID, shippingMethodDesc, shippingPrice, shippingInstructions, retailCustomerName, retailCustomerPhone, retailCustomerStreet1, retailCustomerStreet2, retailCustomerCity, retailCustomerStateProvince, retailCustomerStateProvinceID, retailCustomerCountry, retailCustomerCountryID, retailCustomerEmail, retailCustomerZipcode, generalPurchaseNotes, stage1Guid, stage2Guid);
        }
        
        public System.Threading.Tasks.Task<MercuryWebService.Mercury.MercuryOrderRequest> CreateMercuryOrder2Async(
                    int webConfigID, 
                    int externalPONumber, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    decimal shippingPrice, 
                    string shippingInstructions, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail, 
                    string retailCustomerZipcode, 
                    string generalPurchaseNotes, 
                    System.Guid stage1Guid, 
                    System.Guid stage2Guid) {
            return base.Channel.CreateMercuryOrder2Async(webConfigID, externalPONumber, shippingMethodID, shippingMethodDesc, shippingPrice, shippingInstructions, retailCustomerName, retailCustomerPhone, retailCustomerStreet1, retailCustomerStreet2, retailCustomerCity, retailCustomerStateProvince, retailCustomerStateProvinceID, retailCustomerCountry, retailCustomerCountryID, retailCustomerEmail, retailCustomerZipcode, generalPurchaseNotes, stage1Guid, stage2Guid);
        }
        
        public MercuryWebService.Mercury.TempLockResponse GetLockDecision(int webConfigID, System.Guid LockRequestID, int ticketGroupID) {
            return base.Channel.GetLockDecision(webConfigID, LockRequestID, ticketGroupID);
        }
        
        public System.Threading.Tasks.Task<MercuryWebService.Mercury.TempLockResponse> GetLockDecisionAsync(int webConfigID, System.Guid LockRequestID, int ticketGroupID) {
            return base.Channel.GetLockDecisionAsync(webConfigID, LockRequestID, ticketGroupID);
        }
        
        public MercuryWebService.Mercury.MercuryOrderRequest CreateMercuryOrder3(
                    int webConfigID, 
                    int externalPONumber, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    string labelUrl, 
                    string trackingNumber, 
                    decimal shippingPrice, 
                    string shippingInstructions, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerZipcode, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail, 
                    string generalPurchaseNotes, 
                    System.Guid stage1Guid, 
                    System.Guid stage2Guid) {
            return base.Channel.CreateMercuryOrder3(webConfigID, externalPONumber, shippingMethodID, shippingMethodDesc, labelUrl, trackingNumber, shippingPrice, shippingInstructions, retailCustomerName, retailCustomerPhone, retailCustomerStreet1, retailCustomerStreet2, retailCustomerCity, retailCustomerStateProvince, retailCustomerStateProvinceID, retailCustomerZipcode, retailCustomerCountry, retailCustomerCountryID, retailCustomerEmail, generalPurchaseNotes, stage1Guid, stage2Guid);
        }
        
        public System.Threading.Tasks.Task<MercuryWebService.Mercury.MercuryOrderRequest> CreateMercuryOrder3Async(
                    int webConfigID, 
                    int externalPONumber, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    string labelUrl, 
                    string trackingNumber, 
                    decimal shippingPrice, 
                    string shippingInstructions, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerZipcode, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail, 
                    string generalPurchaseNotes, 
                    System.Guid stage1Guid, 
                    System.Guid stage2Guid) {
            return base.Channel.CreateMercuryOrder3Async(webConfigID, externalPONumber, shippingMethodID, shippingMethodDesc, labelUrl, trackingNumber, shippingPrice, shippingInstructions, retailCustomerName, retailCustomerPhone, retailCustomerStreet1, retailCustomerStreet2, retailCustomerCity, retailCustomerStateProvince, retailCustomerStateProvinceID, retailCustomerZipcode, retailCustomerCountry, retailCustomerCountryID, retailCustomerEmail, generalPurchaseNotes, stage1Guid, stage2Guid);
        }
        
        public MercuryWebService.Mercury.MercuryOrderShipping UpdateMercuryOrderShipping2(
                    int webConfigID, 
                    int mercuryOrderID, 
                    int externalPONumber, 
                    int ticketGroupID, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    string labelUrl, 
                    string trackingNumber, 
                    decimal shippingPrice, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerZipcode, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail) {
            return base.Channel.UpdateMercuryOrderShipping2(webConfigID, mercuryOrderID, externalPONumber, ticketGroupID, shippingMethodID, shippingMethodDesc, labelUrl, trackingNumber, shippingPrice, retailCustomerName, retailCustomerPhone, retailCustomerStreet1, retailCustomerStreet2, retailCustomerCity, retailCustomerStateProvince, retailCustomerStateProvinceID, retailCustomerZipcode, retailCustomerCountry, retailCustomerCountryID, retailCustomerEmail);
        }
        
        public System.Threading.Tasks.Task<MercuryWebService.Mercury.MercuryOrderShipping> UpdateMercuryOrderShipping2Async(
                    int webConfigID, 
                    int mercuryOrderID, 
                    int externalPONumber, 
                    int ticketGroupID, 
                    int shippingMethodID, 
                    string shippingMethodDesc, 
                    string labelUrl, 
                    string trackingNumber, 
                    decimal shippingPrice, 
                    string retailCustomerName, 
                    string retailCustomerPhone, 
                    string retailCustomerStreet1, 
                    string retailCustomerStreet2, 
                    string retailCustomerCity, 
                    string retailCustomerStateProvince, 
                    System.Nullable<int> retailCustomerStateProvinceID, 
                    string retailCustomerZipcode, 
                    string retailCustomerCountry, 
                    System.Nullable<int> retailCustomerCountryID, 
                    string retailCustomerEmail) {
            return base.Channel.UpdateMercuryOrderShipping2Async(webConfigID, mercuryOrderID, externalPONumber, ticketGroupID, shippingMethodID, shippingMethodDesc, labelUrl, trackingNumber, shippingPrice, retailCustomerName, retailCustomerPhone, retailCustomerStreet1, retailCustomerStreet2, retailCustomerCity, retailCustomerStateProvince, retailCustomerStateProvinceID, retailCustomerZipcode, retailCustomerCountry, retailCustomerCountryID, retailCustomerEmail);
        }
        
        public System.IO.Stream GetMercuryInstantDownload(int webConfigID, int mercuryOrderID) {
            return base.Channel.GetMercuryInstantDownload(webConfigID, mercuryOrderID);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetMercuryInstantDownloadAsync(int webConfigID, int mercuryOrderID) {
            return base.Channel.GetMercuryInstantDownloadAsync(webConfigID, mercuryOrderID);
        }
    }
}
